/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateLayoutRouteImport } from './routes/_private-layout'
import { Route as AuthLayoutRouteImport } from './routes/_auth-layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrivateLayoutNewsRouteImport } from './routes/_private-layout/news'
import { Route as AuthLayoutRegisterRouteImport } from './routes/_auth-layout/register'
import { Route as AuthLayoutLoginRouteImport } from './routes/_auth-layout/login'

const PrivateLayoutRoute = PrivateLayoutRouteImport.update({
  id: '/_private-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateLayoutNewsRoute = PrivateLayoutNewsRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => PrivateLayoutRoute,
} as any)
const AuthLayoutRegisterRoute = AuthLayoutRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/news': typeof PrivateLayoutNewsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/news': typeof PrivateLayoutNewsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth-layout': typeof AuthLayoutRouteWithChildren
  '/_private-layout': typeof PrivateLayoutRouteWithChildren
  '/_auth-layout/login': typeof AuthLayoutLoginRoute
  '/_auth-layout/register': typeof AuthLayoutRegisterRoute
  '/_private-layout/news': typeof PrivateLayoutNewsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register' | '/news'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/news'
  id:
    | '__root__'
    | '/'
    | '/_auth-layout'
    | '/_private-layout'
    | '/_auth-layout/login'
    | '/_auth-layout/register'
    | '/_private-layout/news'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  PrivateLayoutRoute: typeof PrivateLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private-layout': {
      id: '/_private-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-layout': {
      id: '/_auth-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private-layout/news': {
      id: '/_private-layout/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof PrivateLayoutNewsRouteImport
      parentRoute: typeof PrivateLayoutRoute
    }
    '/_auth-layout/register': {
      id: '/_auth-layout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthLayoutRegisterRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth-layout/login': {
      id: '/_auth-layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
  }
}

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface PrivateLayoutRouteChildren {
  PrivateLayoutNewsRoute: typeof PrivateLayoutNewsRoute
}

const PrivateLayoutRouteChildren: PrivateLayoutRouteChildren = {
  PrivateLayoutNewsRoute: PrivateLayoutNewsRoute,
}

const PrivateLayoutRouteWithChildren = PrivateLayoutRoute._addFileChildren(
  PrivateLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  PrivateLayoutRoute: PrivateLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
